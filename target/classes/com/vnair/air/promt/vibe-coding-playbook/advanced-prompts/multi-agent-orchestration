<multi_agent_workflow version="1.0">
  <agents>
    <agent id="architect" role="system_architect">
      <responsibility>High-level design, boundaries, non-functionals</responsibility>
      <inputs>Business requirements; technical constraints; current modules</inputs>
      <outputs>Architecture spec, API contracts, data flows, ADRs</outputs>
      <specialization>Scalability, performance, security</specialization>
    </agent>
    <agent id="backend" role="backend_engineer">
      <responsibility>API + data layer implementation</responsibility>
      <inputs>Architecture spec; DB schema; workflows</inputs>
      <outputs>Controllers, services, repositories, migrations</outputs>
      <specialization>DB optimization, security, error handling</specialization>
    </agent>
    <agent id="frontend" role="frontend_engineer">
      <responsibility>UI and interaction flows</responsibility>
      <inputs>API contracts; booking/payment workflows</inputs>
      <outputs>React components, state, UX flows</outputs>
      <specialization>Component architecture, accessibility</specialization>
    </agent>
  </agents>

  <handoff>
    <step from="architect" to="backend">Finalize API contracts + data flows</step>
    <step from="backend" to="frontend">Publish OpenAPI + mock server</step>
    <step from="frontend" to="architect">UX review vs non-functionals</step>
  </handoff>

  <quality_gates>
    <gate owner="architect">Non-functionals mapped to KPIs</gate>
    <gate owner="backend">Unit/Integration tests pass; p95 target</gate>
    <gate owner="frontend">API contract tests green</gate>
  </quality_gates>

  <coordination_protocol>
    <rule>All changes must keep contracts backward-compatible</rule>
    <rule>Use ADRs for decisions; IDs referenced in PRs</rule>
    <rule>Feature flags for risky paths (payment/booking)</rule>
  </coordination_protocol>
</multi_agent_workflow>
