package com.vnair.air.controller;

import org.springframework.data.domain.Page;
import org.springframework.data.domain.PageRequest;
import org.springframework.data.domain.Pageable;
import org.springframework.http.HttpStatus;
import org.springframework.security.access.prepost.PreAuthorize;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.PutMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.bind.annotation.RestController;

import com.vnair.air.dto.request.create.TicketCreateRequest;
import com.vnair.air.dto.request.update.TicketUpdateRequest;
import com.vnair.air.dto.response.TicketResponse;
import com.vnair.air.dto.response.TicketPageResponse;
import com.vnair.air.enums.TicketStatus;
import com.vnair.air.service.TicketService;
import com.vnair.common.model.ResponseData;

import io.swagger.v3.oas.annotations.Operation;
import io.swagger.v3.oas.annotations.Parameter;
import io.swagger.v3.oas.annotations.responses.ApiResponse;
import io.swagger.v3.oas.annotations.responses.ApiResponses;
import io.swagger.v3.oas.annotations.tags.Tag;
import jakarta.validation.Valid;
import lombok.RequiredArgsConstructor;
import lombok.extern.slf4j.Slf4j;

import java.util.List;

@RestController
@RequestMapping("/api/v1/ticket")
@Tag(name = "Ticket Controller", description = "Ticket management endpoints - Module trung gian")
@Slf4j(topic = "TICKET-CONTROLLER")
@RequiredArgsConstructor
public class TicketController {

        private final TicketService ticketService;

        @Operation(summary = "Create new ticket", description = "Create a new ticket manually (Manager/System only) - Normally tickets are auto-generated by flight creation")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Ticket created successfully"),
                        @ApiResponse(responseCode = "400", description = "Invalid request data or validation failed"),
                        @ApiResponse(responseCode = "403", description = "Access denied - Manager/System required")
        })
        @PostMapping
        @PreAuthorize("hasAuthority('TICKET:CREATE:ALL')")
        public ResponseData<TicketResponse> createTicket(
                        @Valid @RequestBody TicketCreateRequest request) {

                log.info("Creating ticket with request: {}", request);

                TicketResponse data = ticketService.createTicket(request);

                return new ResponseData<>(HttpStatus.OK.value(), "Ticket created successfully", data);
        }

        @Operation(summary = "Update ticket", description = "Update an existing ticket by ID (Manager/System only)")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Ticket updated successfully"),
                        @ApiResponse(responseCode = "404", description = "Ticket not found"),
                        @ApiResponse(responseCode = "400", description = "Invalid request data"),
                        @ApiResponse(responseCode = "403", description = "Access denied - Manager/System required")
        })
        @PutMapping("/{id}")
        @PreAuthorize("hasAuthority('TICKET:UPDATE:ALL')")
        public ResponseData<TicketResponse> updateTicket(
                        @Parameter(description = "Ticket ID") @PathVariable Long id,
                        @Valid @RequestBody TicketUpdateRequest request) {

                log.info("Updating ticket with ID: {}, request: {}", id, request);

                TicketResponse data = ticketService.updateTicket(id, request);

                return new ResponseData<>(HttpStatus.OK.value(), "Ticket updated successfully", data);
        }

        @Operation(summary = "Update ticket status", description = "Update ticket status (System/Manager only) - Used for booking flow: AVAILABLE -> BOOKED -> PAID")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Ticket status updated successfully"),
                        @ApiResponse(responseCode = "404", description = "Ticket not found"),
                        @ApiResponse(responseCode = "403", description = "Access denied - System/Manager required")
        })
        @PutMapping("/{id}/status")
        @PreAuthorize("hasAuthority('TICKET:UPDATE:ALL')")
        public ResponseData<TicketResponse> updateTicketStatus(
                        @Parameter(description = "Ticket ID") @PathVariable Long id,
                        @Parameter(description = "New ticket status") @RequestParam TicketStatus status) {

                log.info("Updating ticket status for ID: {} to status: {}", id, status);

                TicketResponse data = ticketService.updateTicketStatus(id, status);

                return new ResponseData<>(HttpStatus.OK.value(), "Ticket status updated successfully", data);
        }

        @Operation(summary = "Cancel ticket", description = "Cancel a ticket (System/Manager only) - Sets status to CANCELED")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Ticket canceled successfully"),
                        @ApiResponse(responseCode = "404", description = "Ticket not found"),
                        @ApiResponse(responseCode = "403", description = "Access denied - System/Manager required")
        })
        @PutMapping("/{id}/cancel")
        @PreAuthorize("hasAuthority('TICKET:CANCEL:ALL')")
        public ResponseData<TicketResponse> cancelTicket(
                        @Parameter(description = "Ticket ID") @PathVariable Long id) {

                log.info("Canceling ticket with ID: {}", id);

                TicketResponse data = ticketService.cancelTicket(id);

                return new ResponseData<>(HttpStatus.OK.value(), "Ticket canceled successfully", data);
        }

        @Operation(summary = "Check-in ticket", description = "Check-in a ticket (System/Manager only)")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Ticket checked-in successfully"),
                        @ApiResponse(responseCode = "404", description = "Ticket not found"),
                        @ApiResponse(responseCode = "400", description = "Ticket not eligible for check-in"),
                        @ApiResponse(responseCode = "403", description = "Access denied - System/Manager required")
        })
        @PutMapping("/{id}/checkin")
        @PreAuthorize("hasAuthority('TICKET:CHECKIN:ALL')")
        public ResponseData<TicketResponse> checkInTicket(
                        @Parameter(description = "Ticket ID") @PathVariable Long id) {

                log.info("Checking in ticket with ID: {}", id);

                TicketResponse data = ticketService.checkInTicket(id);

                return new ResponseData<>(HttpStatus.OK.value(), "Ticket checked-in successfully", data);
        }

        @Operation(summary = "Delete ticket", description = "Delete a ticket by ID (Manager only)")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Ticket deleted successfully"),
                        @ApiResponse(responseCode = "404", description = "Ticket not found"),
                        @ApiResponse(responseCode = "403", description = "Access denied - Manager required")
        })
        @DeleteMapping("/{id}")
        @PreAuthorize("hasAuthority('TICKET:DELETE:ALL')")
        public ResponseData<Void> deleteTicket(
                        @Parameter(description = "Ticket ID") @PathVariable Long id) {

                log.info("Deleting ticket with ID: {}", id);

                ticketService.deleteTicket(id);

                return new ResponseData<>(HttpStatus.OK.value(), "Ticket deleted successfully", null);
        }

        @Operation(summary = "Get ticket by ID", description = "Retrieve ticket details by ID (All users)")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Ticket found"),
                        @ApiResponse(responseCode = "404", description = "Ticket not found")
        })
        @GetMapping("/{id}")
        public ResponseData<TicketResponse> getTicketById(
                        @Parameter(description = "Ticket ID") @PathVariable Long id) {

                log.info("Getting ticket by ID: {}", id);

                TicketResponse data = ticketService.getTicketById(id);

                return new ResponseData<>(HttpStatus.OK.value(), "Ticket retrieved successfully", data);
        }

        @Operation(summary = "Get all tickets", description = "Retrieve all tickets with pagination (Manager only)")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Tickets retrieved successfully"),
                        @ApiResponse(responseCode = "403", description = "Access denied - Manager required")
        })
        @GetMapping
        @PreAuthorize("hasAuthority('TICKET:READ:ALL')")
        public ResponseData<TicketPageResponse> getAllTickets(
                        @Parameter(description = "Page number (0-based)") @RequestParam(defaultValue = "0") int page,
                        @Parameter(description = "Page size") @RequestParam(defaultValue = "10") int size) {

                log.info("Getting all tickets with page: {}, size: {}", page, size);

                Pageable pageable = PageRequest.of(page, size);
                Page<TicketResponse> pageData = ticketService.getAllTickets(pageable);

                TicketPageResponse data = new TicketPageResponse();
                data.setContent(pageData.getContent());
                data.setPageNumber(pageData.getNumber());
                data.setPageSize(pageData.getSize());
                data.setTotalPages(pageData.getTotalPages());
                data.setTotalElements(pageData.getTotalElements());

                return new ResponseData<>(HttpStatus.OK.value(), "Tickets retrieved successfully", data);
        }

        @Operation(summary = "Get tickets by flight with pagination", description = "Retrieve tickets for a specific flight with pagination")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Tickets retrieved successfully")
        })
        @GetMapping("/flight/{flightId}/paginated")
        public ResponseData<TicketPageResponse> getTicketsByFlightPaginated(
                        @Parameter(description = "Flight ID") @PathVariable Long flightId,
                        @Parameter(description = "Page number (0-based)") @RequestParam(defaultValue = "0") int page,
                        @Parameter(description = "Page size") @RequestParam(defaultValue = "10") int size) {

                log.info("Getting tickets for flight ID: {} with page: {}, size: {}", flightId, page, size);

                // Note: This needs a proper service method - for now using workaround
                Pageable pageable = PageRequest.of(page, size);
                Page<TicketResponse> allTickets = ticketService.getAllTickets(pageable);

                // Filter by flight - this is not efficient and should be done at
                // service/repository level
                List<TicketResponse> filteredContent = allTickets.getContent().stream()
                                .filter(ticket -> ticket.getFlight() != null
                                                && ticket.getFlight().contains(flightId.toString()))
                                .toList();

                TicketPageResponse data = new TicketPageResponse();
                data.setContent(filteredContent);
                data.setPageNumber(allTickets.getNumber());
                data.setPageSize(allTickets.getSize());
                data.setTotalPages(allTickets.getTotalPages());
                data.setTotalElements(allTickets.getTotalElements());

                return new ResponseData<>(HttpStatus.OK.value(), "Tickets retrieved successfully", data);
        }

        @Operation(summary = "Validate ticket for check-in", description = "Validate if ticket is eligible for check-in")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Ticket validation completed"),
                        @ApiResponse(responseCode = "404", description = "Ticket not found")
        })
        @GetMapping("/{id}/validate-checkin")
        public ResponseData<Boolean> validateTicketForCheckIn(
                        @Parameter(description = "Ticket ID") @PathVariable Long id) {

                log.info("Validating ticket for check-in: {}", id);

                Boolean data = ticketService.validateTicketForCheckIn(id);

                return new ResponseData<>(HttpStatus.OK.value(), "Ticket validation completed", data);
        }

        @Operation(summary = "Generate tickets for flight", description = "Generate tickets automatically for a flight based on airplane capacity and ticket types (System/Manager only)")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Tickets generated successfully"),
                        @ApiResponse(responseCode = "404", description = "Flight not found"),
                        @ApiResponse(responseCode = "403", description = "Access denied - System/Manager required")
        })
        @PostMapping("/generate/flight/{flightId}")
        @PreAuthorize("hasAuthority('TICKET:GENERATE:ALL')")
        public ResponseData<Void> generateTicketsForFlight(
                        @Parameter(description = "Flight ID") @PathVariable Long flightId) {

                log.info("Generating tickets for flight: {}", flightId);

                ticketService.generateTicketsForFlight(flightId);

                return new ResponseData<>(HttpStatus.OK.value(), "Tickets generated successfully", null);
        }

        @Operation(summary = "Update ticket status for all tickets of a flight", description = "Batch update ticket status for all tickets of a specific flight (System/Manager only)")
        @ApiResponses(value = {
                        @ApiResponse(responseCode = "200", description = "Ticket statuses updated successfully"),
                        @ApiResponse(responseCode = "404", description = "Flight not found"),
                        @ApiResponse(responseCode = "403", description = "Access denied - System/Manager required")
        })
        @PutMapping("/flight/{flightId}/status")
        @PreAuthorize("hasAuthority('TICKET:UPDATE:ALL')")
        public ResponseData<Void> updateTicketStatusByFlight(
                        @Parameter(description = "Flight ID") @PathVariable Long flightId,
                        @Parameter(description = "New status for all tickets") @RequestParam TicketStatus status) {

                log.info("Updating all tickets for flight: {} to status: {}", flightId, status);

                ticketService.updateTicketStatusByFlight(flightId, status);

                return new ResponseData<>(HttpStatus.OK.value(), "Ticket statuses updated successfully", null);
        }
}