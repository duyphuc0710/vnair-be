Architectural Decision Template — VNair Backend

Mục tiêu: Chuẩn hoá ra quyết định kiến trúc cho VNair Backend (Spring Boot/Java 17/PostgreSQL) để AI agent có thể đề xuất phương án, so sánh, và ra khuyến nghị rõ ràng, có thể thực thi.

Context hệ thống (cố định cho dự án này):
- System: Hệ thống đặt vé máy bay gồm user management, flight search, booking, payment; RBAC với JWT/refresh token
- Tech Stack: Spring Boot 3.5.4, Java 17, PostgreSQL, Spring Security, JPA/Hibernate, OpenAPI/Swagger, Docker
- Modules: `user`, `air`, `common` trong monolith; DB PostgreSQL (port 5431)
- Ràng buộc: Không thay đổi schema DB hiện có và luồng JWT hiện tại; duy trì tương thích REST API hiện có; giữ audit trail

Yêu cầu/Constraints nghiệp vụ-kỹ thuật:
- Performance: Tìm kiếm/đặt vé thời gian thực, p95 < 500ms; booking đồng thời không double-booking
- Availability: 99.5%+ cho booking; bảo trì theo lịch cho tính năng phụ
- Security: JWT + refresh, RBAC, xử lý thanh toán an toàn, PCI awareness
- Scalability: Hỗ trợ tăng trưởng booking 10x, nhiều sân bay/chuyến bay
- Integrations: MOMO/Banking/Credit Card; webhook confirmations

Đầu vào bắt buộc cho mỗi quyết định (điền vào dưới đây):
- Problem statement: [mô tả vấn đề kiến trúc cần quyết định]
- Mức ảnh hưởng: [users/bộ phận, rủi ro, chi phí]
- Các ràng buộc bổ sung: [compliance, thời gian, chi phí, phụ thuộc]

1) Phân tích vấn đề
- Loại vấn đề: [scalability|performance|reliability|maintainability|security|cost]
- Nguyên nhân gốc rễ (root causes):
   - [liệt kê 3-5 nguyên nhân có bằng chứng]
- Tác động hiện tại: [số liệu cụ thể: p95, error %, throughput, CPU/DB]

2) Các phương án (ít nhất 3 phương án, so sánh rõ ràng)
Định dạng cho mỗi phương án:
- Tên phương án: [ví dụ: Cache flight search với Redis]
- Thiết kế tổng quan: [sơ lược các thành phần, luồng dữ liệu]
- Công nghệ/chọn lựa chính: [Redis/Hikari config/Read-replica/etc.] + Lý do
- Độ phức tạp triển khai: [1-10]
- Timeline ước tính: [ngày/tuần], Nguồn lực: [1 dev]
- Rủi ro & giảm thiểu: [liệt kê]
- Ảnh hưởng dài hạn/bảo trì: [dễ/khó, vendor lock-in, chi phí]
- Chi phí: [Dev effort + vận hành ~$]

3) Khuyến nghị
- Lý do chọn: [bám constraints trên, trade-off rõ ràng]
- Chiến lược triển khai/từng bước: [canary/feature-flag/blue-green]
- KPI/Success metrics: [p95, error rate, CPU/DB load, booking success]
- Giám sát/quan sát: [Micrometer/Actuator logs, SQL slow log]
- Điểm có thể fail & kế hoạch dự phòng: [fallback, rollback]

4) Câu hỏi cần xác nhận với stakeholder
- [5-10 câu hỏi yes/no hoặc định lượng]

Output yêu cầu (AI phải xuất đúng định dạng):
```yaml
decision:
   problem: "..."
   constraints:
      - "..."
   options:
      - name: "..."
         design: "..."
         tech: ["..."]
         complexity: 1-10
         timeline: "..."
         risks: ["..."]
         maintenance: "..."
         cost: "..."
      - name: "..."
         ...
   recommendation:
      chosen: "..."
      rationale: "..."
      rollout: ["step1","step2","step3"]
      success_metrics: ["p95<500ms","error<1%"]
      monitoring: ["Actuator","DB slow logs"]
      failure_points: ["..."]
      contingency: ["rollback plan ..."]
   stakeholder_questions:
      - "..."
```

Checklist chấp nhận:
- [ ] Liệt kê >=3 phương án với so sánh định lượng
- [ ] Ràng buộc dự án được phản chiếu vào phương án
- [ ] Có KPI và kế hoạch giám sát rõ ràng
- [ ] Có rollout và rollback cụ thể, không big-bang mù mờ
- [ ] Đầu ra đúng định dạng YAML ở trên
